/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface NFTLoanFacilitatorInterface extends ethers.utils.Interface {
  functions: {
    'INTEREST_RATE_DECIMALS()': FunctionFragment;
    'SCALAR()': FunctionFragment;
    'borrowTicketContract()': FunctionFragment;
    'closeLoan(uint256,address)': FunctionFragment;
    'createLoan(uint256,address,uint256,uint256,address,uint256,address)': FunctionFragment;
    'interestOwed(uint256)': FunctionFragment;
    'lendTicketContract()': FunctionFragment;
    'loanEndSeconds(uint256)': FunctionFragment;
    'loanInfo(uint256)': FunctionFragment;
    'originationFeeRate()': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repayAndCloseLoan(uint256)': FunctionFragment;
    'seizeCollateral(uint256,address)': FunctionFragment;
    'setBorrowTicketContract(address)': FunctionFragment;
    'setLendTicketContract(address)': FunctionFragment;
    'totalOwed(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'underwriteLoan(uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'updateOriginationFeeRate(uint256)': FunctionFragment;
    'withdrawOriginationFees(address,uint256,address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'INTEREST_RATE_DECIMALS',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'SCALAR', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'borrowTicketContract',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'closeLoan',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'createLoan',
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'interestOwed',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'lendTicketContract',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'loanEndSeconds',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'loanInfo',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'originationFeeRate',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'repayAndCloseLoan',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'seizeCollateral',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBorrowTicketContract',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setLendTicketContract',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'totalOwed',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'underwriteLoan',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateOriginationFeeRate',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawOriginationFees',
    values: [string, BigNumberish, string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'INTEREST_RATE_DECIMALS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'SCALAR', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'borrowTicketContract',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'closeLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createLoan', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'interestOwed',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lendTicketContract',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loanEndSeconds',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'loanInfo', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'originationFeeRate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'repayAndCloseLoan',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'seizeCollateral',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBorrowTicketContract',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setLendTicketContract',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'totalOwed', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'underwriteLoan',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateOriginationFeeRate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawOriginationFees',
    data: BytesLike,
  ): Result;

  events: {
    'BuyoutUnderwriter(uint256,address,address,uint256,uint256)': EventFragment;
    'Close(uint256)': EventFragment;
    'CreateLoan(uint256,address,uint256,address,uint256,address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Repay(uint256,address,address,uint256,uint256)': EventFragment;
    'SeizeCollateral(uint256)': EventFragment;
    'UnderwriteLoan(uint256,address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BuyoutUnderwriter'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Close'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreateLoan'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Repay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SeizeCollateral'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnderwriteLoan'): EventFragment;
}

export type BuyoutUnderwriterEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber] & {
    id: BigNumber;
    underwriter: string;
    replacedLoanOwner: string;
    interestEarned: BigNumber;
    replacedAmount: BigNumber;
  }
>;

export type CloseEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type CreateLoanEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
  ] & {
    id: BigNumber;
    minter: string;
    collateralTokenId: BigNumber;
    collateralContract: string;
    maxInterestRate: BigNumber;
    loanAssetContract: string;
    minLoanAmount: BigNumber;
    minDurationSeconds: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RepayEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber] & {
    id: BigNumber;
    repayer: string;
    loanOwner: string;
    interestEarned: BigNumber;
    loanAmount: BigNumber;
  }
>;

export type SeizeCollateralEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type UnderwriteLoanEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
    id: BigNumber;
    underwriter: string;
    interestRate: BigNumber;
    loanAmount: BigNumber;
    durationSeconds: BigNumber;
  }
>;

export class NFTLoanFacilitator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTLoanFacilitatorInterface;

  functions: {
    INTEREST_RATE_DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    SCALAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowTicketContract(overrides?: CallOverrides): Promise<[string]>;

    closeLoan(
      loanId: BigNumberish,
      sendCollateralTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    createLoan(
      collateralTokenId: BigNumberish,
      collateralContractAddress: string,
      maxPerSecondInterest: BigNumberish,
      minLoanAmount: BigNumberish,
      loanAssetContractAddress: string,
      minDurationSeconds: BigNumberish,
      mintBorrowTicketTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    interestOwed(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    lendTicketContract(overrides?: CallOverrides): Promise<[string]>;

    loanEndSeconds(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    loanInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
      ] & {
        closed: boolean;
        perSecondInterestRate: BigNumber;
        accumulatedInterest: BigNumber;
        lastAccumulatedTimestamp: BigNumber;
        durationSeconds: BigNumber;
        loanAmount: BigNumber;
        collateralTokenId: BigNumber;
        collateralContractAddress: string;
        loanAssetContractAddress: string;
      }
    >;

    originationFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    repayAndCloseLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    seizeCollateral(
      loanId: BigNumberish,
      sendCollateralTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBorrowTicketContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLendTicketContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    totalOwed(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    underwriteLoan(
      loanId: BigNumberish,
      interestRate: BigNumberish,
      amount: BigNumberish,
      durationSeconds: BigNumberish,
      sendLendTicketTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateOriginationFeeRate(
      _originationFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawOriginationFees(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  INTEREST_RATE_DECIMALS(overrides?: CallOverrides): Promise<number>;

  SCALAR(overrides?: CallOverrides): Promise<BigNumber>;

  borrowTicketContract(overrides?: CallOverrides): Promise<string>;

  closeLoan(
    loanId: BigNumberish,
    sendCollateralTo: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  createLoan(
    collateralTokenId: BigNumberish,
    collateralContractAddress: string,
    maxPerSecondInterest: BigNumberish,
    minLoanAmount: BigNumberish,
    loanAssetContractAddress: string,
    minDurationSeconds: BigNumberish,
    mintBorrowTicketTo: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  interestOwed(
    loanId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  lendTicketContract(overrides?: CallOverrides): Promise<string>;

  loanEndSeconds(
    loanId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  loanInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
    ] & {
      closed: boolean;
      perSecondInterestRate: BigNumber;
      accumulatedInterest: BigNumber;
      lastAccumulatedTimestamp: BigNumber;
      durationSeconds: BigNumber;
      loanAmount: BigNumber;
      collateralTokenId: BigNumber;
      collateralContractAddress: string;
      loanAssetContractAddress: string;
    }
  >;

  originationFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  repayAndCloseLoan(
    loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  seizeCollateral(
    loanId: BigNumberish,
    sendCollateralTo: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBorrowTicketContract(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLendTicketContract(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  totalOwed(
    loanId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  underwriteLoan(
    loanId: BigNumberish,
    interestRate: BigNumberish,
    amount: BigNumberish,
    durationSeconds: BigNumberish,
    sendLendTicketTo: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateOriginationFeeRate(
    _originationFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawOriginationFees(
    asset: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    INTEREST_RATE_DECIMALS(overrides?: CallOverrides): Promise<number>;

    SCALAR(overrides?: CallOverrides): Promise<BigNumber>;

    borrowTicketContract(overrides?: CallOverrides): Promise<string>;

    closeLoan(
      loanId: BigNumberish,
      sendCollateralTo: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    createLoan(
      collateralTokenId: BigNumberish,
      collateralContractAddress: string,
      maxPerSecondInterest: BigNumberish,
      minLoanAmount: BigNumberish,
      loanAssetContractAddress: string,
      minDurationSeconds: BigNumberish,
      mintBorrowTicketTo: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    interestOwed(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lendTicketContract(overrides?: CallOverrides): Promise<string>;

    loanEndSeconds(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    loanInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
      ] & {
        closed: boolean;
        perSecondInterestRate: BigNumber;
        accumulatedInterest: BigNumber;
        lastAccumulatedTimestamp: BigNumber;
        durationSeconds: BigNumber;
        loanAmount: BigNumber;
        collateralTokenId: BigNumber;
        collateralContractAddress: string;
        loanAssetContractAddress: string;
      }
    >;

    originationFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayAndCloseLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    seizeCollateral(
      loanId: BigNumberish,
      sendCollateralTo: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBorrowTicketContract(
      _contract: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLendTicketContract(
      _contract: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    totalOwed(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    underwriteLoan(
      loanId: BigNumberish,
      interestRate: BigNumberish,
      amount: BigNumberish,
      durationSeconds: BigNumberish,
      sendLendTicketTo: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateOriginationFeeRate(
      _originationFeeRate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawOriginationFees(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'BuyoutUnderwriter(uint256,address,address,uint256,uint256)'(
      id?: BigNumberish | null,
      underwriter?: string | null,
      replacedLoanOwner?: string | null,
      interestEarned?: null,
      replacedAmount?: null,
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        id: BigNumber;
        underwriter: string;
        replacedLoanOwner: string;
        interestEarned: BigNumber;
        replacedAmount: BigNumber;
      }
    >;

    BuyoutUnderwriter(
      id?: BigNumberish | null,
      underwriter?: string | null,
      replacedLoanOwner?: string | null,
      interestEarned?: null,
      replacedAmount?: null,
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        id: BigNumber;
        underwriter: string;
        replacedLoanOwner: string;
        interestEarned: BigNumber;
        replacedAmount: BigNumber;
      }
    >;

    'Close(uint256)'(
      id?: BigNumberish | null,
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    Close(
      id?: BigNumberish | null,
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    'CreateLoan(uint256,address,uint256,address,uint256,address,uint256,uint256)'(
      id?: BigNumberish | null,
      minter?: string | null,
      collateralTokenId?: null,
      collateralContract?: null,
      maxInterestRate?: null,
      loanAssetContract?: null,
      minLoanAmount?: null,
      minDurationSeconds?: null,
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
      ],
      {
        id: BigNumber;
        minter: string;
        collateralTokenId: BigNumber;
        collateralContract: string;
        maxInterestRate: BigNumber;
        loanAssetContract: string;
        minLoanAmount: BigNumber;
        minDurationSeconds: BigNumber;
      }
    >;

    CreateLoan(
      id?: BigNumberish | null,
      minter?: string | null,
      collateralTokenId?: null,
      collateralContract?: null,
      maxInterestRate?: null,
      loanAssetContract?: null,
      minLoanAmount?: null,
      minDurationSeconds?: null,
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
      ],
      {
        id: BigNumber;
        minter: string;
        collateralTokenId: BigNumber;
        collateralContract: string;
        maxInterestRate: BigNumber;
        loanAssetContract: string;
        minLoanAmount: BigNumber;
        minDurationSeconds: BigNumber;
      }
    >;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    'Repay(uint256,address,address,uint256,uint256)'(
      id?: BigNumberish | null,
      repayer?: string | null,
      loanOwner?: string | null,
      interestEarned?: null,
      loanAmount?: null,
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        id: BigNumber;
        repayer: string;
        loanOwner: string;
        interestEarned: BigNumber;
        loanAmount: BigNumber;
      }
    >;

    Repay(
      id?: BigNumberish | null,
      repayer?: string | null,
      loanOwner?: string | null,
      interestEarned?: null,
      loanAmount?: null,
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        id: BigNumber;
        repayer: string;
        loanOwner: string;
        interestEarned: BigNumber;
        loanAmount: BigNumber;
      }
    >;

    'SeizeCollateral(uint256)'(
      id?: BigNumberish | null,
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    SeizeCollateral(
      id?: BigNumberish | null,
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    'UnderwriteLoan(uint256,address,uint256,uint256,uint256)'(
      id?: BigNumberish | null,
      underwriter?: string | null,
      interestRate?: null,
      loanAmount?: null,
      durationSeconds?: null,
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        id: BigNumber;
        underwriter: string;
        interestRate: BigNumber;
        loanAmount: BigNumber;
        durationSeconds: BigNumber;
      }
    >;

    UnderwriteLoan(
      id?: BigNumberish | null,
      underwriter?: string | null,
      interestRate?: null,
      loanAmount?: null,
      durationSeconds?: null,
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        id: BigNumber;
        underwriter: string;
        interestRate: BigNumber;
        loanAmount: BigNumber;
        durationSeconds: BigNumber;
      }
    >;
  };

  estimateGas: {
    INTEREST_RATE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    SCALAR(overrides?: CallOverrides): Promise<BigNumber>;

    borrowTicketContract(overrides?: CallOverrides): Promise<BigNumber>;

    closeLoan(
      loanId: BigNumberish,
      sendCollateralTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    createLoan(
      collateralTokenId: BigNumberish,
      collateralContractAddress: string,
      maxPerSecondInterest: BigNumberish,
      minLoanAmount: BigNumberish,
      loanAssetContractAddress: string,
      minDurationSeconds: BigNumberish,
      mintBorrowTicketTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    interestOwed(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lendTicketContract(overrides?: CallOverrides): Promise<BigNumber>;

    loanEndSeconds(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    loanInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    originationFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    repayAndCloseLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    seizeCollateral(
      loanId: BigNumberish,
      sendCollateralTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBorrowTicketContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLendTicketContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    totalOwed(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    underwriteLoan(
      loanId: BigNumberish,
      interestRate: BigNumberish,
      amount: BigNumberish,
      durationSeconds: BigNumberish,
      sendLendTicketTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateOriginationFeeRate(
      _originationFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawOriginationFees(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INTEREST_RATE_DECIMALS(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    SCALAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowTicketContract(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    closeLoan(
      loanId: BigNumberish,
      sendCollateralTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    createLoan(
      collateralTokenId: BigNumberish,
      collateralContractAddress: string,
      maxPerSecondInterest: BigNumberish,
      minLoanAmount: BigNumberish,
      loanAssetContractAddress: string,
      minDurationSeconds: BigNumberish,
      mintBorrowTicketTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    interestOwed(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lendTicketContract(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    loanEndSeconds(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    loanInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    originationFeeRate(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    repayAndCloseLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    seizeCollateral(
      loanId: BigNumberish,
      sendCollateralTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBorrowTicketContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLendTicketContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    totalOwed(
      loanId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    underwriteLoan(
      loanId: BigNumberish,
      interestRate: BigNumberish,
      amount: BigNumberish,
      durationSeconds: BigNumberish,
      sendLendTicketTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateOriginationFeeRate(
      _originationFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawOriginationFees(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
